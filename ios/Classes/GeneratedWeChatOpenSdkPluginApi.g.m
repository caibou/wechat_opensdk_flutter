// Autogenerated from Pigeon (v11.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "GeneratedWeChatOpenSdkPluginApi.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

@implementation WxSceneTypeBox
- (instancetype)initWithValue:(WxSceneType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface WxShareBaseModel ()
+ (WxShareBaseModel *)fromList:(NSArray *)list;
+ (nullable WxShareBaseModel *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface WxSdkOnResp ()
+ (WxSdkOnResp *)fromList:(NSArray *)list;
+ (nullable WxSdkOnResp *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface WxShareWebPage ()
+ (WxShareWebPage *)fromList:(NSArray *)list;
+ (nullable WxShareWebPage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface WxShareImage ()
+ (WxShareImage *)fromList:(NSArray *)list;
+ (nullable WxShareImage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation WxShareBaseModel
+ (instancetype)makeWithTitle:(NSString *)title
    content:(NSString *)content
    scene:(WxSceneType)scene
    thumbImageUrl:(NSString *)thumbImageUrl {
  WxShareBaseModel* pigeonResult = [[WxShareBaseModel alloc] init];
  pigeonResult.title = title;
  pigeonResult.content = content;
  pigeonResult.scene = scene;
  pigeonResult.thumbImageUrl = thumbImageUrl;
  return pigeonResult;
}
+ (WxShareBaseModel *)fromList:(NSArray *)list {
  WxShareBaseModel *pigeonResult = [[WxShareBaseModel alloc] init];
  pigeonResult.title = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.content = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.content != nil, @"");
  pigeonResult.scene = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.thumbImageUrl = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.thumbImageUrl != nil, @"");
  return pigeonResult;
}
+ (nullable WxShareBaseModel *)nullableFromList:(NSArray *)list {
  return (list) ? [WxShareBaseModel fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.title ?: [NSNull null]),
    (self.content ?: [NSNull null]),
    @(self.scene),
    (self.thumbImageUrl ?: [NSNull null]),
  ];
}
@end

@implementation WxSdkOnResp
+ (instancetype)makeWithErrCode:(NSNumber *)errCode
    type:(NSNumber *)type
    country:(nullable NSString *)country
    description:(nullable NSString *)description
    lang:(nullable NSString *)lang
    errorDescription:(nullable NSString *)errorDescription {
  WxSdkOnResp* pigeonResult = [[WxSdkOnResp alloc] init];
  pigeonResult.errCode = errCode;
  pigeonResult.type = type;
  pigeonResult.country = country;
  pigeonResult.description = description;
  pigeonResult.lang = lang;
  pigeonResult.errorDescription = errorDescription;
  return pigeonResult;
}
+ (WxSdkOnResp *)fromList:(NSArray *)list {
  WxSdkOnResp *pigeonResult = [[WxSdkOnResp alloc] init];
  pigeonResult.errCode = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.errCode != nil, @"");
  pigeonResult.type = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.type != nil, @"");
  pigeonResult.country = GetNullableObjectAtIndex(list, 2);
  pigeonResult.description = GetNullableObjectAtIndex(list, 3);
  pigeonResult.lang = GetNullableObjectAtIndex(list, 4);
  pigeonResult.errorDescription = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable WxSdkOnResp *)nullableFromList:(NSArray *)list {
  return (list) ? [WxSdkOnResp fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.errCode ?: [NSNull null]),
    (self.type ?: [NSNull null]),
    (self.country ?: [NSNull null]),
    (self.description ?: [NSNull null]),
    (self.lang ?: [NSNull null]),
    (self.errorDescription ?: [NSNull null]),
  ];
}
@end

@implementation WxShareWebPage
+ (instancetype)makeWithPageUrl:(NSString *)pageUrl
    base:(WxShareBaseModel *)base {
  WxShareWebPage* pigeonResult = [[WxShareWebPage alloc] init];
  pigeonResult.pageUrl = pageUrl;
  pigeonResult.base = base;
  return pigeonResult;
}
+ (WxShareWebPage *)fromList:(NSArray *)list {
  WxShareWebPage *pigeonResult = [[WxShareWebPage alloc] init];
  pigeonResult.pageUrl = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.pageUrl != nil, @"");
  pigeonResult.base = [WxShareBaseModel nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.base != nil, @"");
  return pigeonResult;
}
+ (nullable WxShareWebPage *)nullableFromList:(NSArray *)list {
  return (list) ? [WxShareWebPage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.pageUrl ?: [NSNull null]),
    (self.base ? [self.base toList] : [NSNull null]),
  ];
}
@end

@implementation WxShareImage
+ (instancetype)makeWithImageData:(nullable FlutterStandardTypedData *)imageData
    base:(WxShareBaseModel *)base {
  WxShareImage* pigeonResult = [[WxShareImage alloc] init];
  pigeonResult.imageData = imageData;
  pigeonResult.base = base;
  return pigeonResult;
}
+ (WxShareImage *)fromList:(NSArray *)list {
  WxShareImage *pigeonResult = [[WxShareImage alloc] init];
  pigeonResult.imageData = GetNullableObjectAtIndex(list, 0);
  pigeonResult.base = [WxShareBaseModel nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.base != nil, @"");
  return pigeonResult;
}
+ (nullable WxShareImage *)nullableFromList:(NSArray *)list {
  return (list) ? [WxShareImage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.imageData ?: [NSNull null]),
    (self.base ? [self.base toList] : [NSNull null]),
  ];
}
@end

@interface WeChatOpenSdkApiCodecReader : FlutterStandardReader
@end
@implementation WeChatOpenSdkApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [WxShareBaseModel fromList:[self readValue]];
    case 129: 
      return [WxShareImage fromList:[self readValue]];
    case 130: 
      return [WxShareWebPage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface WeChatOpenSdkApiCodecWriter : FlutterStandardWriter
@end
@implementation WeChatOpenSdkApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[WxShareBaseModel class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[WxShareImage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[WxShareWebPage class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface WeChatOpenSdkApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation WeChatOpenSdkApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[WeChatOpenSdkApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[WeChatOpenSdkApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *WeChatOpenSdkApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    WeChatOpenSdkApiCodecReaderWriter *readerWriter = [[WeChatOpenSdkApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void WeChatOpenSdkApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<WeChatOpenSdkApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.wechat_opensdk_flutter.WeChatOpenSdkApi.registerApp"
        binaryMessenger:binaryMessenger
        codec:WeChatOpenSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerAppAppId:urlSchema:universalLink:completion:)], @"WeChatOpenSdkApi api (%@) doesn't respond to @selector(registerAppAppId:urlSchema:universalLink:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_urlSchema = GetNullableObjectAtIndex(args, 1);
        NSString *arg_universalLink = GetNullableObjectAtIndex(args, 2);
        [api registerAppAppId:arg_appId urlSchema:arg_urlSchema universalLink:arg_universalLink completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.wechat_opensdk_flutter.WeChatOpenSdkApi.isWxInstalled"
        binaryMessenger:binaryMessenger
        codec:WeChatOpenSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isWxInstalledWithCompletion:)], @"WeChatOpenSdkApi api (%@) doesn't respond to @selector(isWxInstalledWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api isWxInstalledWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.wechat_opensdk_flutter.WeChatOpenSdkApi.shareWebPage"
        binaryMessenger:binaryMessenger
        codec:WeChatOpenSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(shareWebPageReq:completion:)], @"WeChatOpenSdkApi api (%@) doesn't respond to @selector(shareWebPageReq:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        WxShareWebPage *arg_req = GetNullableObjectAtIndex(args, 0);
        [api shareWebPageReq:arg_req completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.wechat_opensdk_flutter.WeChatOpenSdkApi.shareImage"
        binaryMessenger:binaryMessenger
        codec:WeChatOpenSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(shareImageReq:completion:)], @"WeChatOpenSdkApi api (%@) doesn't respond to @selector(shareImageReq:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        WxShareImage *arg_req = GetNullableObjectAtIndex(args, 0);
        [api shareImageReq:arg_req completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface WxSdkOnRespApiCodecReader : FlutterStandardReader
@end
@implementation WxSdkOnRespApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [WxSdkOnResp fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface WxSdkOnRespApiCodecWriter : FlutterStandardWriter
@end
@implementation WxSdkOnRespApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[WxSdkOnResp class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface WxSdkOnRespApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation WxSdkOnRespApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[WxSdkOnRespApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[WxSdkOnRespApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *WxSdkOnRespApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    WxSdkOnRespApiCodecReaderWriter *readerWriter = [[WxSdkOnRespApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface WxSdkOnRespApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation WxSdkOnRespApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onRespResp:(WxSdkOnResp *)arg_resp completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.wechat_opensdk_flutter.WxSdkOnRespApi.onResp"
      binaryMessenger:self.binaryMessenger
      codec:WxSdkOnRespApiGetCodec()];
  [channel sendMessage:@[arg_resp ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

